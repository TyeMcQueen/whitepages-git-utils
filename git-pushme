#!/bin/bash
#
# This will push the branch you're currently in to the remote that it's
# tracking, if there is one.  This avoids having to correctly type the current
# branch name, but gives you the benefit of not accidentally pushing
# branches that aren't ready.
#

function usage() {
    echo "Usage: git pushme [-f | --force] [commit]" >&2
}

force=""

GETOPT=$(getopt -u -o hf --long force -- "$@")
if [[ $? != 0 ]]; then
    usage
    exit 1
fi
set -- $GETOPT

while [[ 0 != $# ]]; do
    case "$1" in
        -f|--force)
            force="-f"
            ;;
        -h)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unrecognized option ($1)??" >&2
            usage
            exit 1
            ;;
    esac
    shift
done


ref=$(git symbolic-ref HEAD 2>/dev/null)
branch=${ref##refs/heads/}

if [[ -z $branch ]]; then
    echo "Not on any branch that I can find!"
    exit 1
fi

remote=$(git config --get "branch.$branch.remote")

# Allow the user to specify a SHA that's not at the tip.  If they
# make a mistake here, they should get a non fast-forward error.
where=${1:+"$1:"}

if [[ -z $remote ]]; then
    echo 'Your branch is not tracking a remote branch.  Consider using "git corb"'
    exit 1
fi

echo "] git push $force $remote $where$branch"
git push $force $remote $where$branch
