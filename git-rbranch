#!/bin/bash
#
# To-do: Do an empty checkin after the branch is created.

checkout=yes
if [ x-c = "x$1" ]; then
    checkout=no
    shift
fi

if [ $# -lt 1 -o 3 -lt $# ]; then
    echo "Usage: git rbranch [-c] [<remote>] <branch> [<from>]"
    echo
    echo "If you want to create a local branch that will later track a remote"
    echo "branch, but it does not yet exist, you can use this command instead"
    echo "of setting up configuration manually or deleting and re-creating"
    echo "your local branch later, after it's been pushed."
    echo
    echo "Args:"
    echo "    -c         - Only create the branch, don't check it out"
    echo "    <remote>   - A remote repository, defaults to 'origin'"
    echo "    <branch>   - The name of a remote branch"
    echo "    <from>     - Starting point for the new branch"
    exit 1
fi

remote=$1; shift;

# If remote is not recognized, assume origin
if ! git remote | grep "^$remote\$" >/dev/null; then
    branch=$remote
    remote="origin"
else
    branch=$1; shift;
fi

# If a remote is actually given as part of the branch, split them and use it
if [ `echo $branch | awk '$1 ~ /\// { print }'` ]; then
    remote="${branch%%/*}"
    branch="${branch##*/}"
fi

if ! git remote | grep -q "^$remote\$"; then
    echo "Unrecognized remote repository, $remote." >&2
    exit 1
fi

from=$1

# Now that we have our arguments, first check to see if the branch already exists
if git branch | sed 's/^..//' | grep -q "^$branch\$"; then
    echo "$branch already exists, not creating."

    if ! git branch -r | sed 's/^..//' | grep -q "^$remote/$branch\$"; then
        echo "Warning: The tracking branch $remote/$branch does not (yet) exists" >&2
    fi
    # It does.  Is it already tracking?
    current_remote=`git config --get "branch.$branch.remote"`
    current_merge=`git config --get "branch.$branch.merge"`

    if [ -z "$current_merge" ]; then
        # Not tracking, set it up
        git config "branch.$branch.remote" "$remote"
        git config "branch.$branch.merge" "refs/heads/$branch"
        echo "$branch set up to track $remote/$branch"
    else
        if [ "$remote" = "$current_remote" -a "$current_merge" = "refs/heads/$branch" ]; then
            echo "$branch is already tracking $remote/$branch"
        else
            echo "$branch is tracking $current_remote/$current_remote_head instead!"
            exit 1
        fi
    fi
else
    # It doesn't, so let's create it
    echo "] git branch $branch" $from
    git branch "$branch" $from || exit $?

    git config "branch.$branch.remote" "$remote"
    git config "branch.$branch.merge" "refs/heads/$branch"
    echo -n "Created branch $branch tracking $remote/$branch from "
    if [ -n "$from" ]; then
        echo "$from"
    else
        head=`git symbolic-ref HEAD 2>/dev/null`
        head=${head##refs/heads/}
        if [ -n "$head" ]; then
            echo "$head"
        else
            echo HEAD
        fi
    fi
fi

if [ yes = "$checkout" ]; then
    echo "] git checkout $branch"
    git checkout "$branch"
fi
