#!/bin/sh
#
# Report branch status for all your tracking branches
#

fetch=''    # -f|--fetch specified
pull=''     # -p|--pull  specified
opts=''     # -q|--quiet, -v|--verbose specified
stat=''     # --stat or -n|--no-stat specified (only for pull)
# Is -q useful enough on fetch/pull?  It seems to have
# little effect on fetch and no effect on pull?

bold="\033[1m"
norm="\033[0m"

function print_status() {
	branch="$1"
	remote=`git config "branch.$branch.remote"`
	remote_branch=`git config "branch.$branch.merge" | sed 's/.*\///'`
	track="$remote/$remote_branch"

	if git log "$track^!" 2>&1 | grep -q 'unknown revision'; then
		echo -e "# ! $branch is tracking ${bold}non-existent${norm} remote branch $track"
	else
		set -- `git log --pretty=oneline "$branch..$track" | wc -l`
		behind="$1"
		set -- `git log --pretty=oneline "$track..$branch" | wc -l`
		ahead="$1"

		if [ 0 != "$behind" ] && [ 0 != "$ahead" ]; then
			echo -e "# X $branch and $track have ${bold}diverged${norm} by $ahead and $behind commits"
		elif [ 0 != "$behind" ]; then
			echo -e "# < $branch is ${bold}behind${norm} $track by $behind commits"
			if [ pull = "$pull" ]; then
				echo ""
				echo "] git checkout $branch"
				if git checkout "$branch"; then
					echo "] git merge$stat$opts $track"
					git merge $stat $opts "$track"
				else
					pull=''
				fi
				echo ""
			fi
		elif [ 0 != "$ahead" ]; then
			echo -e "# > $branch is ${bold}ahead${norm} of $track by $ahead commits"
		else
			echo -e "# = $branch is ${bold}current${norm} with $track"
		fi
	fi
}

GETOPT=`getopt -o fpqvn --long fetch,pull,quiet,verbose,stat,no-stat -- "$@"`
if [ $? != 0 ]; then
	echo "Usage: $0 [-fpqvn] [--stat]" >&2
	echo "Short for: --fetch --pull --quiet --verbose --no-stat" >&2
	exit 1
fi
set -- $GETOPT

while [ 0 != "$#" ]; do
	case "$1" in
		-f|--fetch)
			fetch=fetch
			;;
		-p|--pull)
			# pull implies fetch (and we're not doing a literal pull)
			fetch=fetch
			pull=pull
			;;
		-q|--quiet|-v|--verbose)
			opts="$opts $1"
			;;
		--stat|-n|--no-stat)
			stat=" $1"
			;;
		--)
			shift
			if [ 0 != "$#" ]; then
				echo "Too many arguments ($*)" >&2
				exit 1
			fi
			;;
		*)
			echo "Unrecognized option ($1)??" >&2
			exit 1
			;;
	esac
	shift
done

if [ fetch = "$fetch" ]; then
	for remote in `git remote`; do
		echo "] git fetch$opts $remote"
		git fetch $opts "$remote"
		echo ''
	done
fi

# Current branch
set -- `git branch | grep '*' | sed 's/*//'`
current_branch=$1
if [ "z$current_branch" != "z" ] && [ "z$current_branch" != "(no branch)" ]; then
	echo "# On branch $current_branch"
	print_status "$current_branch"

	# A blank line to separate other branches
	echo "#"
fi

# The rest
branches=$(git branch | grep -v '*' |
	$(
		echo "echo"; # the outer $() runs a command; it needs a verb
		while read branch; do
			[ -n "`git config \"branch.$branch.merge\"`" ] && echo $branch;
		done
	)
)

for branch in $branches; do
	print_status "$branch"
done

if [ pull = "$pull" ]; then
	git checkout "$current_branch"
fi
