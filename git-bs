#!/bin/bash
#
# git Branch Sync
# Report branch status for all your tracking branches and optionally sync them

fetch=''    # -f|--fetch specified
pull=''     # -p|--pull  specified
noise=''    # -q|--quiet, -v|--verbose specified
stat=''     # --stat or -n|--no-stat specified (only for pull)
stash=''    # -s|--stash specified
local=show  # -r|--remote-only specified
# Is -q useful enough on fetch/pull?  It seems to have
# little effect on fetch and no effect on pull?

bold="\033[1m"
norm="\033[0m"

function print_status() {
    branch="$1"
    remote=$(git config "branch.$branch.remote")
    remote_branch=$(git config "branch.$branch.merge")
    track="$remote/${remote_branch##*/}"

    if [[ "/" = $track ]]; then
        if [[ show = $local ]]; then
            echo -e "# . $branch is only ${bold}local${norm}"
        fi
    elif git rev-parse "$track" 2>&1 | grep -q 'unknown revision'; then
        echo -e "# ! $branch is tracking ${bold}non-existent${norm} remote branch $track"
    else
        set -- $(git rev-list "$branch..$track" | wc -l)
        behind="$1"
        set -- $(git rev-list "$track..$branch" | wc -l)
        ahead="$1"

        if [[ 0 != $behind && 0 != $ahead ]]; then
            echo -e "# X $branch and $track have ${bold}diverged${norm} by $ahead and $behind commits"
        elif [[ 0 != $behind ]]; then
            echo -e "# < $branch is ${bold}behind${norm} $track by $behind commits"
            if [[ pull = $pull ]]; then
                echo ""
                echo "] git checkout $branch"
                if git checkout "$branch"; then
                    echo "] git merge$stat $track"
                    git merge $stat "$track"
                else
                    pull='error'
                fi
                echo ""
            fi
        elif [[ 0 != $ahead ]]; then
            echo -e "# > $branch is ${bold}ahead${norm} of $track by $ahead commits"
        else
            echo -e "# = $branch is ${bold}current${norm} with $track"
        fi
    fi
}

GETOPT=$(getopt -o fnpqrsv --long fetch,no-stat,pull,quiet,remote-only,stash,verbose,stat -- "$@")
if [[ $? != 0 ]]; then
    echo "Usage: $0 [-fnpqrsv] [--stat]" >&2
    echo "Short for: --fetch --no-stat --pull --quiet --remote-only --stash --verbose" >&2
    exit 1
fi
set -- $GETOPT

while [[ 0 != $# ]]; do
    case "$1" in
        -f|--fetch)
            fetch=fetch
            ;;
        -p|--pull)
            # pull implies fetch (and we're not doing a literal pull)
            fetch=fetch
            pull=pull
            ;;
        -q|--quiet|-v|--verbose)
            noise="$1"
            ;;
        -r|--remote-only)
            local=hide
            ;;
        --stat|-n|--no-stat)
            stat=" $1"
            ;;
        --stash|-s)
            stash="stash"
            ;;
        --)
            shift
            if [[ 0 != $# ]]; then
                echo "Too many arguments ($*)" >&2
                exit 1
            fi
            ;;
        *)
            echo "Unrecognized option ($1)??" >&2
            exit 1
            ;;
    esac
    shift
done

if [[ fetch = $fetch ]]; then
    for remote in $(git remote); do
        echo "] git fetch$noise $remote"
        git fetch $noise "$remote"
        echo ''
    done
fi

if [[ stash = $stash && pull = $pull ]]; then
    echo ""
    echo "] git stash save git-bs auto-stash"
    output=$(git stash save git-bs auto-stash)
    echo $output
    if echo $output | grep "No local changes" >/dev/null 2>&1; then
        stash=""
    fi
fi;

# Current branch
current_branch=$(git branch | grep '*' | sed 's/ *\* *//')
if [[ -n $current_branch && $current_branch != "(no branch)" ]]; then
    echo "# On branch $current_branch"

    print_status "$current_branch"

    # A blank line to separate other branches
    echo "#"
fi

# The rest
branches=$(git branch | grep -v '*')

for branch in $branches; do
    print_status "$branch"
done

if [[ -n $pull ]]; then
    git checkout "$current_branch"
fi

if [[ stash = "$stash" && pull = "$pull" ]]; then
    echo ""
    echo "] git stash pop"
    git stash pop
fi
